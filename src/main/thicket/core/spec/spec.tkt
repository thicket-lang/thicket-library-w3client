/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Spec.Core

import Data
import Lang

import Spec.Logger

model TestContext {
    text    : string
    success : number
    failure : number
}

model Expect[a] {
    toBe       : a -> bool
    toBeIn     : Collection[a] -> bool
    toBeAKey   : [b] Map[a b] -> bool
    toBeAValue : [b] Map[b a] -> bool
}

class expect[a] this:Comparable[a] {
    with Expect[a]
    not : Expect[a]
} {
    def not = Expect (a -> self toBe       a not) 
              	     (a -> self toBeIn     a not)
               	     (a -> self toBeAKey   a not)
               	     (a -> self toBeAValue a not)
               
    def toBe a = this == a
    def toBeIn c = c find (e -> this == e) present
    def toBeAKey m = self toBeIn $ m keys ()
    def toBeAValue m = self toBeIn $ m values ()
}

class descriptionSpecs this:(TestContext,TestLogger) {
    it   : string -> bool -> descriptionSpecs
    done : unit
} {
    def it s b =         
        when b then { 
          let context = new this._1 with success=(this._1.success + 1) in
            do { 
              this._2.success s
            } return $ descriptionSpecs context,this._2
        } else {
          let context = new this._1 with failure=(this._1.failure + 1) in
            do { 
              this._2.failure s 
            } return $ descriptionSpecs context,this._2
        }
    
    def done = 
        do { 
          this._2.terminate (this._1.success,this._1.failure)
        } return ()
        
}

def description : TestLogger -> string -> descriptionSpecs = l s -> {
    do { 
      l.description s 
    } return $ descriptionSpecs (TestContext s 0 0),l
}
