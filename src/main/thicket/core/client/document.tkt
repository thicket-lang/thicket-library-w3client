/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Client.Document

from Client.Event.Mouse import MouseEventType,mouseEventType
from Client.Event.Key import KeyEventType,keyEventType

from Data.Native import native
from System.Internal import internal
from Data.String import string
from Data.Number import number,number2string
from Data.Option import option,some,none
from Data.List import list,List

class dom this:native {
    addEmptyAttribute : string -> dom
    addAttribute : string -> string -> dom
    findAttribute : string -> option[string]
    removeAttribute : string -> dom
    
    addChild : dom -> dom
    addChilds : list[dom] -> dom
    removeChilds : dom
    
    onMouseEvent : [a] MouseEventType -> (dom -> a) -> dom
    onKeyEvent   : [a] KeyEventType -> (dom -> number -> a) -> dom

    find : string -> option[dom]

    clone : dom
    replace : dom -> dom
    remove : dom
    
    value : option[string]
    
    map : [a] (dom -> a) -> a
} {
    def addEmptyAttribute n = self addAttribute n ""
    def addAttribute = internal "dom.setAttribute" self
    def findAttribute n = internal "dom.getAttribute" self n (e -> some $ string e) none
    def removeAttribute = internal "dom.resetAttribute" self
    
    def addChild = internal "dom.appendChild" self
    def addChilds l = l foldL dom::addChild self
    def removeChilds = internal "dom.removeChilds" self

    def onMouseEvent e f = internal "dom.onMouseEvent" self (mouseEventType e toString) (n -> f $ dom n)
    def onKeyEvent e f = internal "dom.onKeyEvent" self (keyEventType e toString) (n c -> f (dom n) (number c))

    def find s = internal "dom.elementById" self s (e -> some $ dom e) none
    
    def clone = dom $ internal "dom.clone" self
    def replace = internal "dom.replace" self
    def remove = internal "dom.remove" self  
    
    def value = internal "dom.getValue" self (s -> some $ string s) none
    
    def map f = f self
}

class document this:string {
    create : dom
    find : option[dom]
} {
    def create = dom $ internal "document.createElement" this
    def find = internal "document.elementById" this (e -> some $ dom e) none
}

def adapter dom2domlist : dom -> list[dom] = s -> {
    List[s]
}

def adapter string2dom : string -> dom = s -> {
    dom $ internal "string.toDom" s
}

def adapter string2domlist : string -> list[dom] = s -> {
    List[(dom $ internal "string.toDom" s)]
}

def adapter number2dom : number -> dom = s -> {
    dom $ internal "string.toDom" (number2string s)
}

def adapter number2domlist : number -> list[dom] = s -> {
    List[(dom $ internal "string.toDom" $ number2string s)]
}
