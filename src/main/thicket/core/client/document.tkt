/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Client.Document

from Data.Native import native
from System.Internal import internal
from Data.String import string
from Data.Number import number,number2string
from Data.Option import option,some,none
from Data.List import list,List
from Data.Boolean import bool

from Client.Dom import dom
from Client.Event.Mouse import MouseEventType,mouseEventType
from Client.Event.Key import KeyEventType,keyEventType

class documentElement this:native {
    with dom
} {
    def addAttribute = internal "dom.setAttribute" self
    def findAttribute n = internal "dom.getAttribute" self n (e -> some $ string e) none
    def removeAttribute = internal "dom.resetAttribute" self
    
    def addChild = internal "dom.appendChild" self
    def removeChilds = internal "dom.removeChilds" self

    def onMouseEvent e f = internal "dom.onMouseEvent" self (mouseEventType e toString) (n -> f $ documentElement n)
    def onKeyEvent e f = internal "dom.onKeyEvent" self (keyEventType e toString) (n c -> f (documentElement n) (number c))

    def find s = internal "dom.elementById" self s (e -> some $ documentElement e) none
    
    def clone = documentElement $ internal "dom.clone" self
    def replaceWith = internal "dom.replace" self
    def remove = internal "dom.remove" self  
    
    def value = internal "dom.getValue" self (s -> some $ string s) none
}

class document this:string {
    create : dom
    find : option[dom]
} {
    def create = documentElement $ internal "document.createElement" this
    def find = internal "document.elementById" this (e -> some $ documentElement e) none
}

def adapter dom2domlist : dom -> list[dom] = s -> {
    List[s]
}

def adapter string2dom : string -> dom = s -> {
    documentElement $ internal "string.toDom" s
}

def adapter string2domlist : string -> list[dom] = s -> {
    List[(string2dom s)]
}

def adapter number2dom : number -> dom = s -> {
    string2dom $ number2string s
}

def adapter number2domlist : number -> list[dom] = s -> {
    List[(number2dom s)]
}
